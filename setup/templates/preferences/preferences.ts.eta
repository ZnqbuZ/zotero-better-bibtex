/* eslint-disable @stylistic/comma-spacing, @stylistic/quotes, max-len */

declare const Zotero: any

import { Preferences, defaults } from './preferences/meta'

export class PreferenceManager {
  public default = defaults
  public prefix = 'translators.better-bibtex.'

<%
it.preferences.forEach(pref => {
  if (pref.name === 'platform') {
-%>
  set <%= pref.shortName %>(v: <%~ pref.valid %>) {
<%
  }
  else {
-%>
  set <%= pref.shortName %>(v: <%~ pref.valid %> | undefined) {
    if (typeof v === 'undefined') v = <%~ JSON.stringify(pref.default) %>

    if (v === this.<%= pref.shortName %>) return
<%
  }
  if (pref.quoted_options) {
-%>
    if (!<%~ pref.quoted_options %>.includes(v)) throw new Error(`Preference <%= pref.shortName %> must be one of <%~ pref.quoted_options %>, got '${v}'`)
<%
  }
  else {
-%>
    if (typeof v !== '<%= pref.type %>') throw new Error(`Preference <%= pref.shortName %> must be of type <%= pref.type %>, got '${typeof v}'`)
<%
  }
-%>
    Zotero.Prefs.set('translators.better-bibtex.<%= pref.shortName %>', v)
  }
  get <%= pref.shortName %>(): <%~ pref.valid %> {
    const v: <%~ pref.valid %> = Zotero.Prefs.get('translators.better-bibtex.<%= pref.shortName %>') as <%~ pref.valid %>

    return typeof v === 'undefined' ? <%~ JSON.stringify(pref.default) %> : v
  }

<%
})
-%>
  get all(): Preferences {
    return Object.keys(defaults).reduce((acc: Partial<Preferences>, pref: string) => { acc[pref] = this[pref]; return acc }, {} as Partial<Preferences>) as Preferences
  }
}
